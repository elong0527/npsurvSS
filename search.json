[{"path":"/articles/basic_functionalities.html","id":"creating-objects-of-class-arm","dir":"Articles","previous_headings":"","what":"Creating objects of class “arm”","title":"Basic functionalities","text":"cornerstone npsurvSS lies objects class “arm”. objects lists capture treatment arm assumptions regarding sample size, accrual, survival, censoring, duration follow-. created, serve inputs functions, including functions power/sample size calculation trial simulation. following code creates two arms, active arm control arm. arms accrue 120 patients uniformly 6 months follow additional 12 months. Patients subjected loss follow-exponential rate 0.00578. active control patients experience event exponential rates 0.0462 0.0578, respectively. hazard ratio two arms therefore approximately 0.8. practice, investigators seldom consider exponential distributions hazard rate scale. Instead, consider median survival survival probability milestone t. defined additional functions facilitate practice. per2haz simple code can convert exponential survival percentile hazard rate vice versa. Alternatively, create_arm_lachin allows investigators specify exponential survival censoring distributions providing median survivals milestone survivals. Note objects created create_arm_lachin belong class “lachin” “arm”. “lachin” subclass “arm”. named class distributions considered Lachin (1986), covers uniform/truncated-exponential accrual, exponential survival, exponential censoring. Check R Documentation ?create_arm examples “arm” objects sophisticated assumptions, piecewise-uniform accrual, piecewise-exponential/Weibull survival, Weibull censoring. objects created create_arm_lachin always class “lachin” “arm”, objects created create_arm always class “arm”, necessarily class “lachin”.","code":"library(npsurvSS) active <- create_arm(size=120,                       accr_time=6,                       surv_scale=0.0462,                       loss_scale=0.00578,                       follow_time=12) control <- create_arm(size=120,                       accr_time=6,                       surv_scale=0.0578,                       loss_scale=0.00578,                       follow_time=12) active <- create_arm(size=120,                       accr_time=6,                       surv_scale=per2haz(15), # corresponds to 15 month median                      loss_scale=per2haz(120), # corresponds to 120 month median                      follow_time=12) control <- create_arm(size=120,                       accr_time=6,                       surv_scale=per2haz(12), # corresponds to 12 month median                      loss_scale=per2haz(120),                       follow_time=12) per2haz(15) # convert median survival to hazard rate #> [1] 0.04620981 per2haz(0.0462) # convert hazard rate to median survival #> [1] 15.00319 active <- create_arm_lachin(size=120,                              accr_time=6,                              surv_median=15,                             loss_milestone=c(120, 0.5), # corresponds to 120 month median                             follow_time=12) control <- create_arm_lachin(size=120,                               accr_time=6,                               surv_milestone=c(12, 0.5), # corresponds to 12 month median                              loss_median=120,                               follow_time=12) class(active) #> [1] \"list\"   \"lachin\" \"arm\""},{"path":"/articles/basic_functionalities.html","id":"visualizing-distributional-assumptions","dir":"Articles","previous_headings":"","what":"Visualizing distributional assumptions","title":"Basic functionalities","text":"created “arm” object, visualizing assumptions easy. example, following code plots accrual cumulative distribution function (CDF):  Likewise, survival function:  Just pbinom R package stats accompanied functions density, quantile, random generation, paccr similarly accompanied daccr, qaccr, raccr. Distribution functions psurv ploss accompanied hsurv hloss hazard.","code":"x <- seq(0, 6, 0.1) plot(x, paccr(q=x, arm=control),       xlab=\"Time from first patient in (month)\",       ylab=\"Accrual CDF\",      type=\"l\") x <- seq(0, 18, 0.1) plot(x, psurv(q=x, arm=control, lower.tail=F),       xlab=\"Time from study entry (month)\",       ylab=\"Survival function\",      type=\"l\")"},{"path":"/articles/basic_functionalities.html","id":"calculating-power-and-sample-size","dir":"Articles","previous_headings":"","what":"Calculating power and sample size","title":"Basic functionalities","text":"Given active arm control arm, calculating power sample size also easy. following code calculates power default setting unweighted log-rank test one-sided alpha 0.025: calculate power tests: Power multiple tests can calculated simulateously: calculate sample size required achieve 80% power: Note size_two_arm returns required sample size n expected number events d (per arm total). calculating required sample size per arm, considers input specified ratio two arms (e.g. 120:120) ignoring individual values (e.g. 120 120). Thus, following two “arm” objects result sample size calculation unweighted log-rank test: Sample size trial 2:1 randomization favor active arm can calculated like :","code":"power_two_arm(control, active) #> [1] 0.2366524 # unweighted log-rank power_two_arm(control, active, test=list(test=\"weighted logrank\")) #> [1] 0.2366524 # Gehan-Breslow weighted log-rank power_two_arm(control, active, test=list(test=\"weighted logrank\", weight=\"n\")) #> [1] 0.2210357 # difference in 12 month survival power_two_arm(control, active, test=list(test=\"survival difference\", milestone=12)) #> [1] 0.2050328 # ratio of 12 month RMST power_two_arm(control, active, test=list(test=\"rmst ratio\", milestone=12)) #> [1] 0.1823979 power_two_arm(control, active, test=list(list(test=\"weighted logrank\"),                                          list(test=\"weighted logrank\", weight=\"n\"),                                          list(test=\"survival difference\", milestone=12),                                          list(test=\"rmst ratio\", milestone=12) )) #>   test     power #> 1    1 0.2366524 #> 2    2 0.2210357 #> 3    3 0.2050328 #> 4    4 0.1823979 size_two_arm(control, active,               test=list(list(test=\"weighted logrank\"),                        list(test=\"weighted logrank\", weight=\"n\"),                        list(test=\"survival difference\", milestone=12),                        list(test=\"rmst ratio\", milestone=12)              )) #>   test       n0       n1        n       d0       d1        d #> 1    1 609.7478 609.7478 1219.496 339.3015 292.4822 631.7837 #> 2    2 663.7018 663.7018 1327.404 369.3249 318.3627 687.6876 #> 3    3 729.6092 729.6092 1459.218 405.9998 349.9770 755.9768 #> 4    4 848.3117 848.3117 1696.623 472.0532 406.9159 878.9692 control_new <- control active_new  <- active control_new$size  <- 1 active_new$size   <- 1 size_two_arm(control_new, active_new) #>        n0        n1         n        d0        d1         d  #>  609.7478  609.7478 1219.4956  339.3015  292.4822  631.7837 active_new$size   <- 2 size_two_arm(control_new, active_new) #>        n0        n1         n        d0        d1         d  #>  445.9943  891.9886 1337.9830  248.1789  427.8668  676.0457"},{"path":"/articles/basic_functionalities.html","id":"event-driven-trials","dir":"Articles","previous_headings":"","what":"Event-driven trials","title":"Basic functionalities","text":"containing keys follow_time total_time, “arm” objects intrinsically apply time-driven trials end fixed period time elapsed last patient . However, can also used approximate event-driven trials, trials study ends desired number events observed. Specifically, trial requiring d events can approximated trial length t, expected number events t equal d. functions exp_events exp_duration can useful purpose: Therefore, given assumptions, trial requiring 150 events can approximated 23.75-month long trial. updating trial duration “arm” object, important update follow_time total_time ensure consistency:","code":"exp_events(control, active) # expected number of events #> [1] 124.3367 tau <- exp_duration(control, active, d=150) # study duration for expected number of events to equal d  tau #> [1] 23.75 control_new <- control control_new$total_time  <- tau control_new$follow_time <- tau - control_new$accr_time active_new  <- active active_new$total_time   <- tau active_new$follow_time  <- tau - active_new$accr_time  exp_events(control_new, active_new) # check expected number of events #> [1] 149.975"},{"path":"/articles/basic_functionalities.html","id":"simulating-a-trial","dir":"Articles","previous_headings":"","what":"Simulating a trial","title":"Basic functionalities","text":"Finally, time-driven event-driven trials can simulated using following code: duration events provided, study end whenever one criteria met: desired, investigators may also simulate complete data (accrual, survival, censoring) individual treatment arm. Note cutoff (number events time) applied. Hence, patients administratively censored:","code":"trial1 <- simulate_trial(control, active, duration=18) head(trial1, 5) #>     arm time.accr   time.obs time.total censor reason #> 116   0 0.6631579 0.03568376  0.6988417      1  event #> 92    0 0.2624965 0.71457564  0.9770722      1  event #> 220   1 0.4498251 0.70077356  1.1505987      1  event #> 35    0 0.5593526 0.72506816  1.2844208      1  event #> 132   1 1.2772193 0.60022969  1.8774490      1  event table(trial1$arm, trial1$reason) #>     #>     administration event followup #>   0             45    72        3 #>   1             52    60        8 max(trial1$time.total) #> [1] 18  trial2 <- simulate_trial(control, active, events=150) head(trial2, 5) #>     arm time.accr   time.obs time.total censor   reason #> 12    0 1.4674219 0.03440594   1.501828      1    event #> 178   1 0.8399225 0.81449929   1.654422      1    event #> 58    0 0.8788622 1.70375604   2.582618      1    event #> 109   0 0.9994647 1.65805933   2.657524      0 followup #> 197   1 2.6160180 0.38430270   3.000321      1    event sum(trial2$censor) #> [1] 150 trial3 <- simulate_trial(control, active, duration=18, events=150) max(trial3$time.total) #> [1] 18 sum(trial3$censor) #> [1] 128 control_sim <- simulate_arm(control) head(control_sim, 5) #>   arm time.accr   time.obs time.total censor reason  time.surv  time.loss #> 1   1 1.7918634 10.1213333  11.913197      1  event 10.1213333  252.50151 #> 2   1 5.1269937  0.3878294   5.514823      1  event  0.3878294   27.86278 #> 3   1 5.0113391 27.9320039  32.943343      1  event 27.9320039   79.99716 #> 4   1 0.5821155 37.7432906  38.325406      1  event 37.7432906 1031.18487 #> 5   1 3.4250615  0.5067781   3.931840      1  event  0.5067781  650.32123 table(control_sim$arm, control_sim$reason) #>     #>     event followup #>   1   106       14"},{"path":"/articles/example1.html","id":"preliminaries","dir":"Articles","previous_headings":"","what":"Preliminaries","title":"Example 1: Optimal randomization ratio","text":"described Web Appendix C, define ratio events patients, control median survival, accrual duration increasing functions HR: actual assumptions visualized :","code":"fun_hr <- function(HR, k, range.min, range.max) {   (HR-0.3) / (0.9-0.3) * exp(k*(HR-0.3)) / exp(k*(0.9-0.3)) * (range.max-range.min) + range.min } HR.vec <- seq(0.3, 0.9, 0.01) plot(HR.vec, fun_hr(HR=HR.vec, k=5, range.min=0.6, range.max=0.7),      xlab=\"Hazard ratio\",      ylab=\"d/n ratio\",      type=\"l\") plot(HR.vec, fun_hr(HR=HR.vec, k=0, range.min=6, range.max=24),      xlab=\"Hazard ratio\",      ylab=\"Control median survival (months)\",      type=\"l\") plot(HR.vec, fun_hr(HR=HR.vec, k=2.3, range.min=12, range.max=48),      xlab=\"Hazard ratio\",      ylab=\"Accrual duration (months)\",      type=\"l\")"},{"path":"/articles/example1.html","id":"figure-1c","dir":"Articles","previous_headings":"","what":"Figure 1C","title":"Example 1: Optimal randomization ratio","text":"calculate power across vector hazard ratios (HR.vec) randomization ratio (p1.vec), begin initializing output table. Note , addition keeping track power, table also keeps track number expected events contributed arm. Also, sake efficency, range scenarios covered exercise less manuscript. resulting figure therefore coarser: fill table using functions power_two_arm exp_events described vignette basic_functionalities: following code produces Figure 1C:","code":"p1.vec <- seq(0.5, 0.7, 0.05) optimal <- tibble(   p1 = rep(p1.vec, each=length(HR.vec)),   HR = rep(HR.vec, length(p1.vec)),   accr_time = fun_hr(HR=HR, k=2.3, range.min=12, range.max=48),   d = (qnorm(0.975)+qnorm(0.9))^2/0.5/0.5/log(HR)^2, # schoenfeld 1981   n = d / fun_hr(HR, k=5, range.min=0.6, range.max=0.7),   m = fun_hr(HR=HR, k=0, range.min=6, range.max=24),   total_time = 0,   power=0,   events0=0,   events1=0 ) R   <- dim(optimal)[1] for (r in 1:R) {      # scenario specific parameters   p1        <- optimal$p1[r]   HR        <- optimal$HR[r]   accr_time <- optimal$accr_time[r]   d         <- optimal$d[r]   n         <- optimal$n[r]   m         <- optimal$m[r]      # create arm objects   arm0 <- create_arm(size=n*(1-p1),                      accr_time=accr_time,                      accr_interval=accr_time*c(0,0.25,0.5,1), # piecewise-uniform accrual                      accr_param=c(0.05,0.25,0.7),                      surv_scale=per2haz(m),                      loss_scale=per2haz(m)*0.05,                      follow_time=12)   arm1 <- create_arm(size=n*p1,                      accr_time=accr_time,                      accr_interval=accr_time*c(0,0.25,0.5,1),                      accr_param=c(0.05,0.25,0.7),                      surv_scale=per2haz(m/HR),                      loss_scale=arm0$loss_scale,                      follow_time=12)      # update total_time and follow_time   duration                <- exp_duration(arm0, arm1, d=d)   arm0$total_time         <- duration   arm0$follow_time        <- duration - arm0$accr_time   arm1$total_time         <- duration   arm1$follow_time        <- duration - arm1$accr_time      # record results   optimal$total_time[r]   <- duration   optimal$power[r]        <- power_two_arm(arm0, arm1)   optimal$events0[r]      <- exp_events(arm0)   optimal$events1[r]      <- exp_events(arm1)    }  head(optimal, 5) #> # A tibble: 5 × 10 #>      p1    HR accr_time     d     n     m total_time power events0 events1 #>   <dbl> <dbl>     <dbl> <dbl> <dbl> <dbl>      <dbl> <dbl>   <dbl>   <dbl> #> 1   0.5  0.3       12    29.0  48.3   6         23.1 0.888    19.4    9.63 #> 2   0.5  0.31      12.2  30.6  51.1   6.3       23.7 0.889    20.3   10.3  #> 3   0.5  0.32      12.3  32.4  53.9   6.6       24.3 0.889    21.4   11.0  #> 4   0.5  0.33      12.5  34.2  57.0   6.9       24.9 0.890    22.4   11.8  #> 5   0.5  0.34      12.7  36.1  60.1   7.2       25.4 0.891    23.6   12.6 group_by(optimal, HR) %>%   filter(power==max(power)) %>% # identify p1 that maximizes power   mutate(eprop=events1/d) %>%   select(HR, p1, eprop) %>%   gather(category, prop, 2:3) %>%   mutate(category=ifelse(category==\"p1\", \"Patients\", \"Events\")) %>%   ggplot(aes(x=HR,y=prop)) +   geom_line(aes(col=category, lty=category), lwd=0.8) +   labs(x=\"Hazard ratio\",         y=\"Proportion contributed by active arm\",        col=\"\",        lty=\"\")"},{"path":"/articles/example1.html","id":"figure-2","dir":"Articles","previous_headings":"","what":"Figure 2","title":"Example 1: Optimal randomization ratio","text":"Figure 2 can produced via similar steps. , sake efficiency, coarser grid HRs considered . Also, empirical power based simulations calculated. First, initialize output table: populate table: following code produces Figure 2:","code":"p1.vec <- c(0.5, 3/5, 2/3) HR.vec <- seq(0.3, 0.9, 0.05) fixed <- tibble(   p1 = rep(p1.vec, each=length(HR.vec)),   HR = rep(HR.vec, length(p1.vec)),   accr_time = fun_hr(HR=HR, k=2.3, range.min=12, range.max=48),   d = (qnorm(0.975)+qnorm(0.9))^2/0.5/0.5/log(HR)^2, # schoenfeld 1981   n = d / fun_hr(HR, k=5, range.min=0.6, range.max=0.7),   m = fun_hr(HR=HR, k=0, range.min=6, range.max=24),   ed = 0, # power, schoenfeld   mu = 0, # power, recommended asymptotic approximation   mu_b = 0, # power, block randomization   mu_s = 0  # power, simple randomization ) R   <- dim(fixed)[1] for (r in 1:R) {      # scenario specific parameters   p1        <- fixed$p1[r]   HR        <- fixed$HR[r]   accr_time <- fixed$accr_time[r]   d         <- fixed$d[r]   n         <- fixed$n[r]   m         <- fixed$m[r]      # create arm objects   arm0 <- create_arm(size=n*(1-p1),                      accr_time=accr_time,                      accr_interval=accr_time*c(0,0.25,0.5,1), # piecewise-uniform accrual                      accr_param=c(0.05,0.25,0.7),                      surv_scale=per2haz(m),                      loss_scale=per2haz(m)*0.05,                      follow_time=12)   arm1 <- create_arm(size=n*p1,                      accr_time=accr_time,                      accr_interval=accr_time*c(0,0.25,0.5,1),                      accr_param=c(0.05,0.25,0.7),                      surv_scale=per2haz(m/HR),                      loss_scale=arm0$loss_scale,                      follow_time=12)      # update total_time and follow_time   duration                <- exp_duration(arm0, arm1, d=d)   arm0$total_time         <- duration   arm0$follow_time        <- duration - arm0$accr_time   arm1$total_time         <- duration   arm1$follow_time        <- duration - arm1$accr_time      # record results   fixed$ed[r]       <- power_two_arm(arm0, arm1,                                       test=list(test=\"weighted logrank\",                                                 mean.approx=\"event driven\"))   fixed$mu[r]       <- power_two_arm(arm0, arm1)   fixed$mu_b[r]     <- power_two_arm(arm0, arm1,                                       test=list(test=\"weighted logrank\",                                                 var.approx=\"block\"))   fixed$mu_s[r]     <- power_two_arm(arm0, arm1,                                       test=list(test=\"weighted logrank\",                                                 var.approx=\"simple\"))    } gather(fixed, key=\"approximation\", value=\"power\", 7:10) %>%   ggplot(aes(x=HR, y=power)) +   geom_line(aes(col=approximation, lty=approximation)) +   facet_wrap(~round(p1,2)) +   labs(x=\"Hazard ratio\",        y=\"Power\",        col=\"\",        lty=\"\")"},{"path":"/articles/example2.html","id":"figure-3","dir":"Articles","previous_headings":"","what":"Figure 3","title":"Example 2: Delayed treatment effect","text":"Suppose 240 active 120 control patients enrolled course 14 months followed 11 months. Assume accrual follows truncated exponential distribution shape parameter 0.1; loss follow-follows Weibull distribution shape parameter 2 scale parameter \\(log(1/0.99)^{1/2}/25\\), 1% patients permanently censored 25 months follow-; survivals follow exponential distributions 9 6 month medians. information captured following “arm” objects: visualize accrual loss--follow-:  manuscript, explore impact power survival active arm follows instead 2-piece exponential distribution, first piece overlaps control arm second piece deviates way median survival remains 9 months. Denoting changepoint \\(\\tau_1\\) arm-specific hazard rates \\(\\lambda_0\\) \\((\\lambda_{11}, \\lambda_{12})=(\\lambda_0, \\lambda_{12})\\), simple algebra dictates \\(\\lambda_{12}=\\{\\lambda: e^{-\\lambda(9-\\tau_1)}=\\frac{0.5}{e^{-\\lambda_0 \\tau_1}}\\}\\). can utilize functions npsurvSS calculate visualize survival active arm various changepoints:","code":"# Active arm1 <- create_arm(size=240,                    accr_time=14,                    accr_dist=\"truncexp\",                    accr_param=0.1,                    surv_scale=per2haz(9),                    loss_scale=log(1/0.99)^(1/2)/25,                    loss_shape=2,                    total_time=25)  # Control arm0 <- create_arm(size=120,                    accr_time=14,                    accr_dist=\"truncexp\",                    accr_param=0.1,                    surv_scale=per2haz(6),                    loss_scale=log(1/0.99)^(1/2)/25,                    loss_shape=2,                    total_time=25) # Accrual tibble(   x = seq(0, 14, 0.1),   y = paccr(x, arm0) ) %>%   ggplot(aes(x, y)) +   geom_line() +   labs(x = \"Time from first patient in (months)\",        y = \"Accrual CDF\")  # Loss to follow-up tibble(   x = seq(0, 25, 0.1),   y = ploss(x, arm0) ) %>%   ggplot(aes(x, y)) +   geom_line() +   labs(x = \"Time from study entry (months)\",        y = \"Loss to follow-up CDF\") # Calculate survival curves x.vec     <- seq(0, 25, 0.1)  # vector of unique x-coordinates tau1.vec  <- seq(0, 4.5, 1.5) # vector of unique changepoints arm1t     <- arm1             # initialize active arm y         <- c()              # vector or all y-coordinates for (tau1 in tau1.vec) {   # Update scale and interval parameters for the active arm   arm1t$surv_scale    <- c(arm0$surv_scale[1], per2haz(9-tau1, 1-0.5/psurv(tau1, arm0, lower.tail=F)))   arm1t$surv_interval <- c(0, tau1, Inf)      # Calculate y-coordinates   y <- c(y, psurv(x.vec, arm1t, lower.tail=F)) }  # Visualize survival curves tibble(   tau1 = rep(tau1.vec, each=length(x.vec)),    x = rep(x.vec, length(tau1.vec)),   y = y ) %>%   ggplot(aes(x, y)) +   geom_line(aes(color=factor(tau1), lty=factor(tau1))) +   labs(x = \"Time from study entry (months)\",        y = \"Survival function\",        color = \"Changepoint\",        lty = \"Changepoint\")"},{"path":"/articles/example2.html","id":"figure-4a","dir":"Articles","previous_headings":"","what":"Figure 4A","title":"Example 2: Delayed treatment effect","text":"Finally, calculate power various non-parametric tests, take advantage power_two_arm’s ability accomodate multiple tests time. sake efficiency , consider changepoints 0, 0.5, 1, …, 5.5. manuscript, consider changepoints 0, 0.1, 0.2, …, 5.9. resulting table looks like : can used generate Figure 4A manuscript:","code":"tau1.vec <- seq(0, 5.5, 0.5) # vector of changepoints table_4a <- data.frame(matrix(0, nrow=length(tau1.vec), ncol=7)) # initialize results table for (r in 1:length(tau1.vec)) {      tau1 <- tau1.vec[r]      # Update scale and interval parameters for the active arm   arm1t$surv_scale    <- c(arm0$surv_scale[1], per2haz(9-tau1, 1-0.5/psurv(tau1, arm0, lower.tail=F)))   arm1t$surv_interval <- c(0, tau1, Inf)      # Calculate power and store results   table_4a[r,] <- c(tau1,                     power_two_arm(arm0, arm1t,                                   test = list(list(test=\"weighted logrank\"),                                               list(test=\"weighted logrank\", weight=\"n\"),                                               list(test=\"weighted logrank\", weight=\"FH_p1_q1\"),                                               list(test=\"survival difference\", milestone=11),                                               list(test=\"rmst difference\", milestone=11),                                               list(test=\"percentile difference\", percentile=0.5)))$power)    }  # Convert table to long format and re-label tests table_4a <- gather(table_4a, \"test\", \"power\", 2:7) %>%   mutate(test = recode(test, X2 = \"wlogrank (1)\",                        X3 = \"wlogrank (GB)\",                        X4 = \"wlogrank (FH)\",                        X5 = \"11-month surv diff\",                        X6 = \"11-month rmst diff\",                        X7 = \"median diff\")) %>%   as_tibble() names(table_4a)[1] <- \"tau1\" table_4a #> # A tibble: 72 × 3 #>     tau1 test         power #>    <dbl> <chr>        <dbl> #>  1   0   wlogrank (1) 0.915 #>  2   0.5 wlogrank (1) 0.912 #>  3   1   wlogrank (1) 0.912 #>  4   1.5 wlogrank (1) 0.913 #>  5   2   wlogrank (1) 0.917 #>  6   2.5 wlogrank (1) 0.924 #>  7   3   wlogrank (1) 0.934 #>  8   3.5 wlogrank (1) 0.946 #>  9   4   wlogrank (1) 0.959 #> 10   4.5 wlogrank (1) 0.974 #> # … with 62 more rows #> # ℹ Use `print(n = ...)` to see more rows ggplot(table_4a, aes(x=tau1, y=power)) +   geom_line(aes(color=test, lty=test)) +   labs(x = \"tau1\",        y = \"Power\",        color = \"Test\",        lty = \"Test\")"},{"path":"/articles/npsurvSS.html","id":"npsurvss-overview","dir":"Articles","previous_headings":"","what":"npsurvSS Overview","title":"npsurvSS Overview","text":"focus fixed design implement different type design time--event data.","code":""},{"path":"/articles/npsurvSS.html","id":"oop-definition","dir":"Articles","previous_headings":"","what":"OOP Definition","title":"npsurvSS Overview","text":"package define OOP object . OOP object contain components single arm. design provide flexibility extend e.g. define stratum added/droped middle trial. e.g comparision group sequential design adaptive design limited budget.","code":"create_arm <- function(size,                        accr_time,                        accr_dist = \"pieceuni\",                        accr_interval = c(0, accr_time),                        accr_param = NA,                        surv_cure = 0,                        surv_interval = c(0, Inf),                        surv_shape=1,                        surv_scale,                        loss_shape=1,                        loss_scale,                        follow_time = Inf,                        total_time = Inf)"},{"path":"/articles/npsurvSS.html","id":"distribution-definition","dir":"Articles","previous_headings":"","what":"Distribution Definition","title":"npsurvSS Overview","text":"package define set distribtion streamline mathmatical implementation. distribution, can implement p, q, d, r, h. strategy npsurvSS, accumulation distribution paccr, qaccr, daccr, raccr, haccr. event distribtion psurv, qsurv, dsurv, rsurv, hsurv. censoring distribution ploss, qloss, dloss, rloss, hloss.","code":""},{"path":"/articles/npsurvSS.html","id":"simulation-one-arm","dir":"Articles","previous_headings":"","what":"Simulation one Arm","title":"npsurvSS Overview","text":"OOP object distribution functions rsurv, raccr rloss, data simulation step simply simulate data arm object using rsurv, raccr rloss. combination different arm, different analysis approach, full flexibility evaluate operational characteritics complicated group sequential design adaptive design.","code":""},{"path":"/articles/npsurvSS.html","id":"probability-of-event-in-calendar-time","dir":"Articles","previous_headings":"","what":"Probability of Event in Calendar Time","title":"npsurvSS Overview","text":"Arm, probability event different time point independent study design given arm OOP object. key define p, q, d h counting process distributions defined previously. definition npsurvSS.","code":"dens_event <- function(arm, teval) {   dsurv(teval, arm) *     ploss(teval, arm, lower.tail=F) *     paccr(pmin(arm$accr_time, arm$total_time-teval), arm) }"},{"path":"/articles/npsurvSS.html","id":"probability-at-risk-in-calendar-time","dir":"Articles","previous_headings":"","what":"Probability at Risk in Calendar Time","title":"npsurvSS Overview","text":"Arm, probability risk different time point independent study design given arm OOP object. key define p, q, d h counting process distributions defined previously. definition npsurvSS.","code":"prob_risk <- function(arm, teval) {   psurv(teval, arm, lower.tail=F) *     ploss(teval, arm, lower.tail=F) *     paccr(pmin(arm$accr_time, arm$total_time-teval), arm) }"},{"path":"/articles/npsurvSS.html","id":"power-and-sample-size","dir":"Articles","previous_headings":"","what":"Power and Sample Size","title":"npsurvSS Overview","text":"fixed design, sample size can obtained can derive effect size based information . details Godwin’s paper training materials.","code":""},{"path":"/articles/project-plan.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Grammer of Study Design Planning","text":"Develop maintain one grammer package study design can challenge. Study design can many possibility. Understand end--end computation details design consideration long challenge learning curve.","code":""},{"path":"/articles/project-plan.html","id":"suggestion","dir":"Articles","previous_headings":"","what":"Suggestion","title":"Grammer of Study Design Planning","text":"R package implement spending functions. R package implement survival, censoring accumulate distribution. R package implement computation utility functions study design. R package implement study design grammer high level. maybe internal, can outsourcing.","code":""},{"path":"/articles/project-plan.html","id":"spending-functions","dir":"Articles","previous_headings":"","what":"Spending functions","title":"Grammer of Study Design Planning","text":"can move spending functions gsDesign independent package. package 0 dependency. gsDesign, gsDesign2 can depends package aovid gsDesign2 depends gsDesign. package scope limited, Hongtao may lead initial development finalize first version CRAN. junior statistician interest study design can maintain future.","code":""},{"path":"/articles/project-plan.html","id":"design-distribution","dir":"Articles","previous_headings":"","what":"Design distribution","title":"Grammer of Study Design Planning","text":"study design time--event data, need specify distribution Survival time Censoring time Accumulation time typically use: exponential piecewise exponential piecewise uniform weibull distribution, can implement p, q, d, r, h. strategy npsurvSS, psurv, qsurv, dsurv, rsurv, hsurv. paccr, qaccr, daccr, raccr, haccr. ploss, qloss, dloss, rloss, hloss. layer abstraction, design component combination functions enhance connection math formula implementation. readability R code. package scope limited, Yilong may lead initial development finalize first version CRAN. junior statistician interest study design can maintain future.","code":""},{"path":"/articles/project-plan.html","id":"computation-details","dir":"Articles","previous_headings":"","what":"Computation details","title":"Grammer of Study Design Planning","text":"group sequential design, apply two approches calculate boundary probability: chain rule design (AHR, wlr) multivariate normal (MaxCombo) part computational intensive, need minimal statistical knowledge. package scope limited, Yujie may lead initial development finalize first version CRAN. senior developer good understanding Rcpp can maintain future.","code":""},{"path":"/articles/project-plan.html","id":"study-design-grammer","dir":"Articles","previous_headings":"","what":"Study Design Grammer","title":"Grammer of Study Design Planning","text":"purpose package define high level structure avoid statistical computation details. OOP object definition study design package scope limited, Nan may lead initial development finalize first version CRAN. senior developer good understanding OOP can maintain future.","code":""},{"path":"/articles/project-plan.html","id":"oversee-committee","dir":"Articles","previous_headings":"","what":"Oversee Committee","title":"Grammer of Study Design Planning","text":"divide conquer approach, need oversee committee ensure component (R package) can integrated seamlessly. committee include Keaven Larry Yujie Nan Hongtao Nan limited scope component existing work , may target alpha-release component end 2022. alpha-release provide study design capability, can build good foundation implemenation next stage.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Godwin Yung. Author, maintainer. Yi Liu. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Yung G, Liu Y (2022). npsurvSS: Sample Size Power Calculation Common Non-Parametric Tests Survival Analysis. R package version 1.0.1, http://github.com/godwinyung/npsurvSS.","code":"@Manual{,   title = {npsurvSS: Sample Size and Power Calculation for Common Non-Parametric Tests in Survival Analysis},   author = {Godwin Yung and Yi Liu},   year = {2022},   note = {R package version 1.0.1},   url = {http://github.com/godwinyung/npsurvSS}, }"},{"path":"/index.html","id":"npsurvss","dir":"","previous_headings":"","what":"Sample Size and Power Calculation for Common Non-Parametric Tests in\n Survival Analysis","title":"Sample Size and Power Calculation for Common Non-Parametric Tests in\n Survival Analysis","text":"goal npsurvSS …","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Sample Size and Power Calculation for Common Non-Parametric Tests in\n Survival Analysis","text":"can install development version npsurvSS GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"godwinyyung/npsurvSS\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Sample Size and Power Calculation for Common Non-Parametric Tests in\n Survival Analysis","text":"basic example shows solve common problem:","code":"library(npsurvSS) ## basic example code"},{"path":"/reference/create_arm.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an 'arm' object — create_arm","title":"Create an 'arm' object — create_arm","text":"Create object class 'arm' specifying trial parameters single arm, including sample size, accrual distribution, survival distribution, loss follow-distribution, study duration.","code":""},{"path":"/reference/create_arm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an 'arm' object — create_arm","text":"","code":"create_arm(size, accr_time, accr_dist = \"pieceuni\",   accr_interval = c(0, accr_time), accr_param = NA, surv_cure = 0,   surv_interval = c(0, Inf), surv_shape = 1, surv_scale,   loss_shape = 1, loss_scale, follow_time = Inf, total_time = Inf)"},{"path":"/reference/create_arm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an 'arm' object — create_arm","text":"size sample size. total sample size unknown, provide integer sample size relative opposing arm, e.g. 1 1:2 randomization ratio 2 2:3. accr_time accrual duration. accr_dist accrual distribution. Default piecewise uniform. Alternatively, 'truncexp' allows truncated exponential distribution proposed Lachin Foulkes (1986). Depending value accr_param, distribution can either convex concave. accr_interval accrual intervals. Defaults single interval spanning 0 accr_time. piecewise uniform accrual one interval desired, specify accr_interval vector increasing changepoints (knots) starting 0 ending accr_time, e.g. c(0, 2, 4) defines piecewise uniform distribution two intervals, [0, 2) [2, 4]. accr_param additional accrual parameter(s). piecewise uniform accrual one interval, specify accr_param vector probabilities patient enrolled interval. probabilities naturally sum 1. accr_dist='truncexp', specify accr_param single number. >0 results convex distribution <0 results concave distribution. surv_cure proportion patients cured. surv_interval survival intervals. Defaults single interval spanning 0 infinity. piecewise exponential survival desired uncured patients, specify surv_interval vector increasing changepoints (knots) starting 0 ending infinity, e.g. c(0, 6, 10, Inf). surv_shape Weibull shape parameter survival distribution uncured patients. surv_scale Weibull scale parameter survival distrubition uncured patients. Piecewise exponential survival may defined specifying surv_shape=1 surv_scale vector piecewise hazard rates. loss_shape Weibull shape parameter loss follow-distribution. loss_scale Weibull scale parameter loss follow-distribution. follow_time follow-duration. total_time total study duration. 1 2 parameters, follow_time total_time, need defined. neither defined, total_time defaulted max value 1e6.","code":""},{"path":"/reference/create_arm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an 'arm' object — create_arm","text":"list containing assumptions size, accrual, censoring, survival,   follow-single arm.","code":""},{"path":"/reference/create_arm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create an 'arm' object — create_arm","text":"Lachin, J. M. Foulkes, M. . (1986) Evaluation sample size power analyses   survival allowance nonuniform patient entry, losses follow-,   noncompliance, stratification. Biometrics, 42, 507-519.","code":""},{"path":[]},{"path":"/reference/create_arm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an 'arm' object — create_arm","text":"","code":"# Example 1 example <- create_arm(size=120,   accr_time=6,                   # uniform accrual   surv_scale=0.05,               # exponential survival   loss_scale=0.005,              # exponential loss to follow-up   follow_time=12) class(example)                   # this example also satisfies properties of subclass 'lachin' #> [1] \"list\"   \"lachin\" \"arm\"     # Example 2 create_arm(size=120,   accr_time=6,                   # truncated exponential accrual   accr_dist=\"truncexp\",   accr_param=0.1,   surv_shape=2,                  # weibull survival   surv_scale=0.05,   loss_shape=1.5,                # weilbull loss to follow-up   loss_scale=0.005,   total_time=18) #> $size #> [1] 120 #>  #> $accr_time #> [1] 6 #>  #> $accr_dist #> [1] \"truncexp\" #>  #> $accr_interval #> [1] 0 6 #>  #> $accr_param #> [1] 0.1 #>  #> $surv_cure #> [1] 0 #>  #> $surv_interval #> [1]   0 Inf #>  #> $surv_shape #> [1] 2 #>  #> $surv_scale #> [1] 0.05 #>  #> $loss_shape #> [1] 1.5 #>  #> $loss_scale #> [1] 0.005 #>  #> $follow_time #> [1] 12 #>  #> $total_time #> [1] 18 #>  #> attr(,\"class\") #> [1] \"list\" \"arm\"   # Example 3 create_arm(size=120,   accr_time=6,   accr_interval=c(0,2,4,6),      # piecewise uniform accrual   accr_param=c(0.2,0.3,0.5),   surv_cure=0.1,                 # 10% cure fraction   surv_interval=c(0,6,10,Inf),   # piecewise exponential survival for uncured patients   surv_scale=c(0.05,0.04,0.03),   loss_shape=0.7,                # weibull loss to follow-up   loss_scale=0.005,   total_time=18) #> $size #> [1] 120 #>  #> $accr_time #> [1] 6 #>  #> $accr_dist #> [1] \"pieceuni\" #>  #> $accr_interval #> [1] 0 2 4 6 #>  #> $accr_param #> [1] 0.2 0.3 0.5 #>  #> $surv_cure #> [1] 0.1 #>  #> $surv_interval #> [1]   0   6  10 Inf #>  #> $surv_shape #> [1] 1 #>  #> $surv_scale #> [1] 0.05 0.04 0.03 #>  #> $loss_shape #> [1] 0.7 #>  #> $loss_scale #> [1] 0.005 #>  #> $follow_time #> [1] 12 #>  #> $total_time #> [1] 18 #>  #> attr(,\"class\") #> [1] \"list\" \"arm\""},{"path":"/reference/create_arm_lachin.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a 'lachin' object — create_arm_lachin","title":"Create a 'lachin' object — create_arm_lachin","text":"Create object class 'lachin' specifying trial parameters single arm, including sample size, accrual distribution, survival distribution, loss follow-distribution, study duration. 'Lachin' objects also 'arm' objects, accrual limited uniform truncated exponential distributions, survival loss follow-limited exponential distribution. 'Lachin' objects advantage expectations certain counting processes closed form equations can therefore calculated efficiently (Lachin Foulkes, 1986).","code":""},{"path":"/reference/create_arm_lachin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a 'lachin' object — create_arm_lachin","text":"","code":"create_arm_lachin(size, accr_time, accr_dist = \"pieceuni\",   accr_param = NA, surv_median = NA, surv_exphazard = NA,   surv_milestone = NA, loss_median = NA, loss_exphazard = NA,   loss_milestone = NA, follow_time = Inf, total_time = Inf)"},{"path":"/reference/create_arm_lachin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a 'lachin' object — create_arm_lachin","text":"size sample size. total sample size unknown, provide integer sample size relative opposing arm, e.g. 1 1:2 randomization ratio 2 2:3. accr_time accrual duration. accr_dist accrual distribution. Default uniform (piecewise uniform one interval). Alternatively, 'truncexp' allows truncated exponential distribution proposed Lachin Foulkes (1986). Depending value accr_param, distribution can either convex concave. accr_param additional accrual parameter accr_dist='truncexp'. accr_param>0 specifies convex distribution accr_param<0 specifies concave distribution. surv_median median survival. surv_exphazard exponential hazard rate survival distribution. surv_milestone tuple c(milestone, probability) uniquely defines exponential survival distribution, e.g. c(12, 0.8) corresponds exponential distribution 80% survival rate 12 months. loss_median median loss follow-. loss_exphazard exponential hazard rate loss follow-distribution. loss_milestone tuple c(milestone, probability) uniquely defines exponential loss follow-distribution, e.g. c(12, 0.99) corresponds exponential distribution 1% loss follow-12 months. follow_time Follow-duration. Either follow_time total_time () specified. total_time Total study duration. Either follow_time () total_time specified.","code":""},{"path":"/reference/create_arm_lachin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a 'lachin' object — create_arm_lachin","text":"list containing assumptions size, accrual, censoring, survival,   follow-single arm.","code":""},{"path":"/reference/create_arm_lachin.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create a 'lachin' object — create_arm_lachin","text":"Lachin, J. M. Foulkes, M. . (1986) Evaluation sample size power analyses   survival allowance nonuniform patient entry, losses follow-,   noncompliance, stratification. Biometrics, 42, 507-519.","code":""},{"path":[]},{"path":"/reference/create_arm_lachin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a 'lachin' object — create_arm_lachin","text":"","code":"# 3 arms with similar survival and loss to follow-up create_arm_lachin(size=120, accr_time=6,   surv_median=14,   loss_median=140,   follow_time=12) #> $size #> [1] 120 #>  #> $accr_time #> [1] 6 #>  #> $accr_dist #> [1] \"pieceuni\" #>  #> $accr_interval #> [1] 0 6 #>  #> $accr_param #> [1] NA #>  #> $surv_cure #> [1] 0 #>  #> $surv_interval #> [1]   0 Inf #>  #> $surv_shape #> [1] 1 #>  #> $surv_scale #> [1] 0.04951051 #>  #> $loss_shape #> [1] 1 #>  #> $loss_scale #> [1] 0.004951051 #>  #> $follow_time #> [1] 12 #>  #> $total_time #> [1] 18 #>  #> attr(,\"class\") #> [1] \"list\"   \"lachin\" \"arm\"    create_arm_lachin(size=120, accr_time=6,   surv_exphazard=0.05,   loss_exphazard=0.005,   follow_time=12) #> $size #> [1] 120 #>  #> $accr_time #> [1] 6 #>  #> $accr_dist #> [1] \"pieceuni\" #>  #> $accr_interval #> [1] 0 6 #>  #> $accr_param #> [1] NA #>  #> $surv_cure #> [1] 0 #>  #> $surv_interval #> [1]   0 Inf #>  #> $surv_shape #> [1] 1 #>  #> $surv_scale #> [1] 0.05 #>  #> $loss_shape #> [1] 1 #>  #> $loss_scale #> [1] 0.005 #>  #> $follow_time #> [1] 12 #>  #> $total_time #> [1] 18 #>  #> attr(,\"class\") #> [1] \"list\"   \"lachin\" \"arm\"    create_arm_lachin(size=120, accr_time=6,   accr_dist=\"truncexp\",   accr_param=0.1,   surv_milestone=c(14, 0.5),   loss_milestone=c(140, 0.5),   total_time=18) #> $size #> [1] 120 #>  #> $accr_time #> [1] 6 #>  #> $accr_dist #> [1] \"truncexp\" #>  #> $accr_interval #> [1] 0 6 #>  #> $accr_param #> [1] 0.1 #>  #> $surv_cure #> [1] 0 #>  #> $surv_interval #> [1]   0 Inf #>  #> $surv_shape #> [1] 1 #>  #> $surv_scale #> [1] 0.04951051 #>  #> $loss_shape #> [1] 1 #>  #> $loss_scale #> [1] 0.004951051 #>  #> $follow_time #> [1] 12 #>  #> $total_time #> [1] 18 #>  #> attr(,\"class\") #> [1] \"list\"   \"lachin\" \"arm\""},{"path":"/reference/daccr.html","id":null,"dir":"Reference","previous_headings":"","what":"Accrual — daccr","title":"Accrual — daccr","text":"Density, distribution function, quantile function, random generation accrual distribution.","code":""},{"path":"/reference/daccr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accrual — daccr","text":"","code":"daccr(x, arm)  paccr(q, arm, lower.tail = T)  qaccr(p, arm)  raccr(n = 1, arm)"},{"path":"/reference/daccr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accrual — daccr","text":"x, q vector quantiles. arm object class 'arm'. lower.tail logical; TRUE, probabilities \\(P(X \\le x)\\); otherwise, \\(P(X > x)\\). p vector probabilities. n number observations.","code":""},{"path":"/reference/daccr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accrual — daccr","text":"daccr gives density, paccr gives distribution   function, qaccr gives quantile function, raccr generates   random deviates.","code":""},{"path":[]},{"path":"/reference/dloss.html","id":null,"dir":"Reference","previous_headings":"","what":"Loss to follow-up — dloss","title":"Loss to follow-up — dloss","text":"Density, distribution function, hazard function, quantile function, random generation loss follow-distribution.","code":""},{"path":"/reference/dloss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Loss to follow-up — dloss","text":"","code":"dloss(x, arm)  ploss(q, arm, lower.tail = T)  hloss(x, arm)  qloss(p, arm, lower.tail = T)  rloss(n = 1, arm)"},{"path":"/reference/dloss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loss to follow-up — dloss","text":"x, q vector quantiles. arm object class 'arm'. lower.tail logical; TRUE, probabilities \\(P(X \\le x)\\); otherwise, \\(P(X > x)\\). p vector probabilities. n number observations.","code":""},{"path":"/reference/dloss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Loss to follow-up — dloss","text":"dloss gives density, ploss gives distribution   function, hloss gives hazard function, qloss gives   quantile function, rloss generates random deviates.","code":""},{"path":[]},{"path":"/reference/dmaxU.html","id":null,"dir":"Reference","previous_headings":"","what":"Maximum observed time — dmaxU","title":"Maximum observed time — dmaxU","text":"Density, distribution function, expected value maximum observed time single arm patients.","code":""},{"path":"/reference/dmaxU.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maximum observed time — dmaxU","text":"","code":"dmaxU(x, arm, include_cens = T)  pmaxU(q, arm, include_cens = T, lower.tail = T)  emaxU(arm, include_cens = T)"},{"path":"/reference/dmaxU.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maximum observed time — dmaxU","text":"x, q vector quantiles. arm object class 'arm'. include_cens logical; TRUE, include time--censoring potential observed time; otherwise, observed time equals time--event. lower.tail logical; TRUE, probabilities \\(P(X \\le x)\\); otherwise, \\(P(X > x)\\).","code":""},{"path":"/reference/dmaxU.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Maximum observed time — dmaxU","text":"dmaxU gives density, pmaxU gives distribution   function, emaxU gives expected value.","code":""},{"path":"/reference/dmaxU.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Maximum observed time — dmaxU","text":"Given patient's time--event \\(T_i\\) time--censoring \\(C_i\\), \\(U_i=\\min(T_i, C_i)\\) defines patient's observed time. maximum observed time patients single arm \\(\\max_i U_i\\).","code":""},{"path":[]},{"path":"/reference/dminimaxU.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimax observed time — dminimaxU","title":"Minimax observed time — dminimaxU","text":"Density, distribution function, quantile function, expected value minimum maximum observed time two treatment arms.","code":""},{"path":"/reference/dminimaxU.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimax observed time — dminimaxU","text":"","code":"dminimaxU(x, arm0, arm1, include_cens = T)  pminimaxU(q, arm0, arm1, include_cens = T, lower.tail = T)  qminimaxU(p, arm0, arm1, include_cens = T, margin = 0.01)  eminimaxU(arm0, arm1, include_cens = T)"},{"path":"/reference/dminimaxU.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimax observed time — dminimaxU","text":"x, q vector quantiles. arm0 object class 'arm'. arm1 object class 'arm'. include_cens logical; TRUE, include time--censoring potential observed time; otherwise, observed time equals time--event. lower.tail logical; TRUE, probabilities \\(P(X \\le x)\\); otherwise, \\(P(X > x)\\). p vector probabilities. margin margin accuracy.","code":""},{"path":"/reference/dminimaxU.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimax observed time — dminimaxU","text":"dminimaxU gives density, pminimaxU gives distribution   function, qminimaxU gives quantile function, eminimaxU gives expected value.","code":""},{"path":"/reference/dminimaxU.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Minimax observed time — dminimaxU","text":"Given patient arm \\(X_i=j\\) time--event \\(T_i\\) time--censoring \\(C_i\\), \\(U_i=\\min(T_i, C_i)\\) defines patient's observed time. maximum observed time patients arm \\(j\\) \\(\\max_{:X_i=j} U_i\\), minimax observed time two arms \\(\\min_j (\\max_{:X_i=j} U_i)\\).","code":""},{"path":[]},{"path":"/reference/dsurv.html","id":null,"dir":"Reference","previous_headings":"","what":"Survival — dsurv","title":"Survival — dsurv","text":"Density, distribution function, hazard function, quantile function, random generation survival distribution.","code":""},{"path":"/reference/dsurv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Survival — dsurv","text":"","code":"dsurv(x, arm, include_cured = T)  psurv(q, arm, include_cured = T, lower.tail = T)  hsurv(x, arm, include_cured = T)  qsurv(p, arm, include_cured = T, lower.tail = T)  rsurv(n = 1, arm, include_cured = T)"},{"path":"/reference/dsurv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Survival — dsurv","text":"x, q vector quantiles. arm object class arm. include_cured logical; TRUE, mixture distribution cured uncured patients considered; otherwise, distribution uncured patients considered. lower.tail logical; TRUE, probabilities \\(P(X \\le x)\\); otherwise, \\(P(X > x)\\). p vector probabilities. n number observations.","code":""},{"path":"/reference/dsurv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Survival — dsurv","text":"dsurv gives density, psurv gives distribution   function, hsurv gives hazard function, qsurv gives   quantile function, rsurv generates random deviates.","code":""},{"path":[]},{"path":"/reference/exp_duration.html","id":null,"dir":"Reference","previous_headings":"","what":"Expected duration — exp_duration","title":"Expected duration — exp_duration","text":"Given one two treatment arms, calculate time \\(\\tau\\) expected number events equals \\(d\\).","code":""},{"path":"/reference/exp_duration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expected duration — exp_duration","text":"","code":"exp_duration(arm0 = NA, arm1 = NA, d, search_start = 10,   search_prec = 0.01, max_duration = 1000)"},{"path":"/reference/exp_duration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expected duration — exp_duration","text":"arm0 object class 'arm'. arm1 object class 'arm'. d vector number events. search_start value search duration tau starts. search_prec value controlling desired precision terminating search. max_duration maximum \\(\\tau\\) consideration.","code":""},{"path":"/reference/exp_duration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expected duration — exp_duration","text":"expected trial duration.","code":""},{"path":[]},{"path":"/reference/exp_duration.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expected duration — exp_duration","text":"","code":"arm0 <- create_arm(size=120, accr_time=6, surv_scale=0.05, loss_scale=0.005, follow_time=12) arm1 <- create_arm(size=120, accr_time=6, surv_scale=0.03, loss_scale=0.005, follow_time=12) exp_duration(arm0, d=61) #> [1] 17.97 exp_duration(arm0, arm1, d=103) #> [1] 18 exp_duration(arm0, d=c(35,61)) #> [1] 10.11 17.97 exp_duration(arm0, arm1, d=c(57,103)) #> [1] 10.03 18.00"},{"path":"/reference/exp_events.html","id":null,"dir":"Reference","previous_headings":"","what":"Expected number of events — exp_events","title":"Expected number of events — exp_events","text":"Given one two treatment arms, calculate expected number events \\(d\\) time \\(\\tau\\).","code":""},{"path":"/reference/exp_events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expected number of events — exp_events","text":"","code":"exp_events(arm0 = NA, arm1 = NA, tau = NA)"},{"path":"/reference/exp_events.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expected number of events — exp_events","text":"arm0 object class 'arm'. arm1 object class 'arm'. tau vector times. Defaults total study duration.","code":""},{"path":"/reference/exp_events.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expected number of events — exp_events","text":"expected number events.","code":""},{"path":[]},{"path":"/reference/exp_events.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expected number of events — exp_events","text":"","code":"arm0 <- create_arm(size=120, accr_time=6, surv_scale=0.05, loss_scale=0.005, follow_time=12) arm1 <- create_arm(size=120, accr_time=6, surv_scale=0.03, loss_scale=0.005, follow_time=12) exp_events(arm0) #> [1] 61.06623 exp_events(arm0, arm1) #> [1] 102.9658 exp_events(arm0, tau=c(10,NA)) #> [1] 34.52265 61.06623 exp_events(arm0, arm1, tau=c(10,NA)) #> [1]  56.72503 102.96582"},{"path":"/reference/per2haz.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert exponential parameters — per2haz","title":"Convert exponential parameters — per2haz","text":"Convert exponential survival percentile hazard rate .","code":""},{"path":"/reference/per2haz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert exponential parameters — per2haz","text":"","code":"per2haz(x, per = 0.5)"},{"path":"/reference/per2haz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert exponential parameters — per2haz","text":"x survival percentile exponential hazard rate per (per)th percentile","code":""},{"path":"/reference/per2haz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert exponential parameters — per2haz","text":"survival percentile hazard rate.","code":""},{"path":"/reference/per2haz.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert exponential parameters — per2haz","text":"$$y=-log(1-per)/x$$","code":""},{"path":"/reference/per2haz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert exponential parameters — per2haz","text":"","code":"per2haz(14)          # hazard rate for exponential with 14-month median #> [1] 0.04951051 per2haz(0.05)        # median survival for exponential with hazard rate 0.05 #> [1] 13.86294 per2haz(14, 0.8)     # hazard rate for exponential with 80th percentile survival at 14 months #> [1] 0.1149599 per2haz(0.27, 0.8)   # 80th percentile survival for exponential with hazard rate 0.27 #> [1] 5.960881"},{"path":"/reference/power_two_arm.html","id":null,"dir":"Reference","previous_headings":"","what":"Power — power_two_arm","title":"Power — power_two_arm","text":"Calculate power two-arm survival study.","code":""},{"path":"/reference/power_two_arm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Power — power_two_arm","text":"","code":"power_two_arm(arm0, arm1, test = list(test = \"weighted logrank\"),   alpha = 0.025, sides = 1)"},{"path":"/reference/power_two_arm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Power — power_two_arm","text":"arm0 object class 'arm'. arm1 object class 'arm'. test list list lists. list must contain minimum key 'test' describing type statistical test. Default test \"weighted logrank\". Kaplan-Meier based tests (\"survival difference\", \"survival ratio\", \"rmst difference\", \"rmst ratio\", \"percentile difference\", \"percentile ratio\") require user define additional key, either desired 'milestone' 'percentile'. weighted log-rank test require additional keys. However, user may choose weight function (\"1\"=unweighted, \"n\"=Gehan-Breslow, \"sqrtN\"=Tarone-Ware, \"FH_p[]_q[b]\"= Fleming-Harrington p=q=b) approximation large-sample mean (\"asymptotic\", \"generalized schoenfeld\", \"event driven\") variance (\"1\", \"block[ randomization]\", \"simple[ randomization]\") wish use. Default choice 'weight'=\"1\", 'mean.approx'=\"asymptotic\", 'var.approx'=\"1\". details regarding different mean variance approximations weight log-rank test, please see Yung Liu (2019). alpha type 1 error rate sides 1=1-sided test, 2=2-sided test","code":""},{"path":"/reference/power_two_arm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Power — power_two_arm","text":"power.","code":""},{"path":"/reference/power_two_arm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Power — power_two_arm","text":"Yung, G Liu, Y. (2019). Sample size power weighted log-rank test Kaplan-Meier based tests allowance non-proportional hazards. Biometrics. <doi:10.1111/biom.13196>","code":""},{"path":[]},{"path":"/reference/power_two_arm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Power — power_two_arm","text":"","code":"arm0 <- create_arm(size=120, accr_time=6, surv_scale=0.05, loss_scale=0.005, follow_time=12) arm1 <- create_arm(size=120, accr_time=6, surv_scale=0.03, loss_scale=0.005, follow_time=12) power_two_arm(arm0, arm1) #> [1] 0.7296235 power_two_arm(arm0, arm1, list(test=\"weighted logrank\",   weight=\"n\",   mean.approx=\"generalized schoenfeld\",   var.approx=\"block\")) #> [1] 0.7069563 power_two_arm(arm0, arm1, list(test=\"survival difference\", milestone=12)) #> [1] 0.658848 power_two_arm(arm0, arm1, list(test=\"rmst ratio\", milestone=12)) #> [1] 0.5684121 power_two_arm(arm0, arm1, list(test=\"percentile difference\", percentile=0.25)) #> [1] 0.4567024 power_two_arm(arm0, arm1, list(   list(test=\"weighted logrank\"),   list(test=\"survival difference\", milestone=12))) #>   test     power #> 1    1 0.7296235 #> 2    2 0.6588480"},{"path":"/reference/simulate_arm.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate complete data for a single arm — simulate_arm","title":"Simulate complete data for a single arm — simulate_arm","text":"Simulate complete data single arm, including time accrual, event, loss follow-. cutoff (number events time) applied. Hence, patients administratively censored.","code":""},{"path":"/reference/simulate_arm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate complete data for a single arm — simulate_arm","text":"","code":"simulate_arm(arm, label = 1)"},{"path":"/reference/simulate_arm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate complete data for a single arm — simulate_arm","text":"arm object class 'arm'. label numeric label simulated arm, e.g. 0 control, 1 treatment","code":""},{"path":"/reference/simulate_arm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate complete data for a single arm — simulate_arm","text":"arm label time.accr time accrual time.obs time observation accrual time.total time observation start study censor 0=censor, 1=event reason event description ('[experience ]event', '[loss ]followup', 'administration[ censoring]') time.surv time event time.loss time loss follow-","code":""},{"path":[]},{"path":"/reference/simulate_arm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate complete data for a single arm — simulate_arm","text":"","code":"arm0 <- create_arm(size=120, accr_time=6, surv_scale=0.05, loss_scale=0.005, follow_time=12) simulate_arm(arm0, label=0) #>     arm  time.accr    time.obs time.total censor   reason   time.surv #> 1     0 3.94310877  0.98845284   4.931562      1    event  0.98845284 #> 2     0 2.03327735  9.38424610  11.417523      1    event  9.38424610 #> 3     0 2.50158976 34.01727889  36.518869      1    event 34.01727889 #> 4     0 1.28831833 29.85911313  31.147431      0 followup 54.51116770 #> 5     0 3.56348960 11.03236658  14.595856      1    event 11.03236658 #> 6     0 2.93101725  2.58804071   5.519058      1    event  2.58804071 #> 7     0 0.39755765 38.00281683  38.400374      1    event 38.00281683 #> 8     0 5.67001549 15.28146116  20.951477      1    event 15.28146116 #> 9     0 3.08461143 29.23446896  32.319080      1    event 29.23446896 #> 10    0 5.50060878  6.98025025  12.480859      1    event  6.98025025 #> 11    0 5.74399860 55.47659666  61.220595      0 followup 68.86026214 #> 12    0 5.66489220 46.06026160  51.725154      1    event 46.06026160 #> 13    0 3.99937284 17.24971604  21.249089      1    event 17.24971604 #> 14    0 3.01850363  9.56314981  12.581653      1    event  9.56314981 #> 15    0 0.43511717 17.19021812  17.625335      1    event 17.19021812 #> 16    0 2.39248986 12.87459771  15.267088      1    event 12.87459771 #> 17    0 2.73160160 38.18452661  40.916128      1    event 38.18452661 #> 18    0 4.35289828 49.50651526  53.859414      1    event 49.50651526 #> 19    0 1.52353033 16.79000404  18.313534      1    event 16.79000404 #> 20    0 2.13497381 47.49303662  49.628010      1    event 47.49303662 #> 21    0 2.93915166 22.77371472  25.712866      1    event 22.77371472 #> 22    0 5.96368819  2.44969089   8.413379      1    event  2.44969089 #> 23    0 0.65610490 36.15007401  36.806179      1    event 36.15007401 #> 24    0 1.98520913 15.78802164  17.773231      1    event 15.78802164 #> 25    0 3.82807892 90.82311757  94.651196      1    event 90.82311757 #> 26    0 4.01917982 62.61922958  66.638409      0 followup 74.36471688 #> 27    0 4.68898668 15.71447678  20.403463      1    event 15.71447678 #> 28    0 2.79705989  4.25672962   7.053790      0 followup  8.12030247 #> 29    0 0.17164938 12.66424120  12.835891      1    event 12.66424120 #> 30    0 0.80541641  4.55241911   5.357836      1    event  4.55241911 #> 31    0 2.88460728  1.79102706   4.675634      1    event  1.79102706 #> 32    0 2.64726864 39.15206789  41.799337      1    event 39.15206789 #> 33    0 5.22422827  9.52106408  14.745292      1    event  9.52106408 #> 34    0 2.04443764 17.45731458  19.501752      1    event 17.45731458 #> 35    0 2.01727286  0.30268299   2.319956      1    event  0.30268299 #> 36    0 0.43798136  0.96598586   1.403967      0 followup 43.42097396 #> 37    0 3.28890539 35.15138541  38.440291      1    event 35.15138541 #> 38    0 3.15472322 22.45453443  25.609258      1    event 22.45453443 #> 39    0 5.09557794  8.25674182  13.352320      1    event  8.25674182 #> 40    0 2.65653047 42.59659712  45.253128      1    event 42.59659712 #> 41    0 2.58376371 13.24656592  15.830330      1    event 13.24656592 #> 42    0 2.26744630  3.22933988   5.496786      0 followup  9.85681823 #> 43    0 5.83315862 16.25880086  22.091959      1    event 16.25880086 #> 44    0 2.72062292 72.37572204  75.096345      1    event 72.37572204 #> 45    0 2.35820095 45.03129669  47.389498      0 followup 59.63735842 #> 46    0 2.79449653  0.40109786   3.195594      1    event  0.40109786 #> 47    0 4.10677688  0.08822255   4.194999      1    event  0.08822255 #> 48    0 3.79229363  6.91137048  10.703664      0 followup  9.93215656 #> 49    0 1.77644326 18.54340210  20.319845      1    event 18.54340210 #> 50    0 4.33105171  2.49855047   6.829602      1    event  2.49855047 #> 51    0 4.45231127 18.63191893  23.084230      1    event 18.63191893 #> 52    0 3.16786382  1.38911104   4.556975      1    event  1.38911104 #> 53    0 5.55941128  8.67728199  14.236693      1    event  8.67728199 #> 54    0 3.27687916 22.66310495  25.939984      1    event 22.66310495 #> 55    0 0.45163151  0.99214958   1.443781      1    event  0.99214958 #> 56    0 3.28213486 35.13663912  38.418774      1    event 35.13663912 #> 57    0 0.55368080 16.12320073  16.676882      0 followup 20.61624680 #> 58    0 4.97253462 19.51154689  24.484082      1    event 19.51154689 #> 59    0 5.48385413 15.05629185  20.540146      1    event 15.05629185 #> 60    0 0.88559602 10.28255580  11.168152      0 followup 15.29314405 #> 61    0 3.54660805 54.82590856  58.372517      1    event 54.82590856 #> 62    0 5.49534020 19.16163376  24.656974      1    event 19.16163376 #> 63    0 3.90026665 34.00678439  37.907051      1    event 34.00678439 #> 64    0 0.94285204  9.88648639  10.829338      1    event  9.88648639 #> 65    0 2.97445044  8.99237146  11.966822      1    event  8.99237146 #> 66    0 2.78694594 37.05856455  39.845510      1    event 37.05856455 #> 67    0 4.14313783  0.41725581   4.560394      1    event  0.41725581 #> 68    0 0.88885462  7.10372898   7.992584      1    event  7.10372898 #> 69    0 0.04508444  1.20853305   1.253617      1    event  1.20853305 #> 70    0 4.40289918 19.88184399  24.284743      1    event 19.88184399 #> 71    0 5.66806836 61.24152418  66.909593      1    event 61.24152418 #> 72    0 3.37460456 19.57253736  22.947142      1    event 19.57253736 #> 73    0 0.05040628  3.64764473   3.698051      1    event  3.64764473 #> 74    0 0.96180266  6.78473163   7.746534      1    event  6.78473163 #> 75    0 1.76031070 10.73366814  12.493979      1    event 10.73366814 #> 76    0 3.06054112 15.87699034  18.937531      1    event 15.87699034 #> 77    0 1.90860090 25.49027457  27.398875      1    event 25.49027457 #> 78    0 0.20639885 55.85485334  56.061252      1    event 55.85485334 #> 79    0 2.66897229 19.38802978  22.057002      1    event 19.38802978 #> 80    0 2.80306993 11.58451079  14.387581      1    event 11.58451079 #> 81    0 4.86566007 32.67261244  37.538273      1    event 32.67261244 #> 82    0 1.87577938 48.38732121  50.263101      1    event 48.38732121 #> 83    0 3.93283149 18.03004637  21.962878      1    event 18.03004637 #> 84    0 0.26121565  4.29051228   4.551728      1    event  4.29051228 #> 85    0 4.69818919  4.07775615   8.775945      1    event  4.07775615 #> 86    0 5.64296475 13.55657924  19.199544      1    event 13.55657924 #> 87    0 0.22013050 17.48199331  17.702124      1    event 17.48199331 #> 88    0 5.96910517 23.10018448  29.069290      1    event 23.10018448 #> 89    0 4.96256808  0.50564292   5.468211      1    event  0.50564292 #> 90    0 3.63381359  2.65951229   6.293326      0 followup 20.04324336 #> 91    0 1.71055983  2.07977586   3.790336      1    event  2.07977586 #> 92    0 2.47621177 22.02549599  24.501708      1    event 22.02549599 #> 93    0 3.25807410 64.60843160  67.866506      1    event 64.60843160 #> 94    0 3.57730955  8.19009905  11.767409      1    event  8.19009905 #> 95    0 3.37973852  3.04004110   6.419780      1    event  3.04004110 #> 96    0 3.87490002 41.64301759  45.517918      1    event 41.64301759 #> 97    0 0.07833281  1.52966049   1.607993      1    event  1.52966049 #> 98    0 3.74940017  7.80983765  11.559238      1    event  7.80983765 #> 99    0 3.25518289 38.62810948  41.883292      1    event 38.62810948 #> 100   0 4.95870086 45.07060201  50.029303      1    event 45.07060201 #> 101   0 5.71977822  8.61279680  14.332575      1    event  8.61279680 #> 102   0 0.35996114 22.36409767  22.724059      1    event 22.36409767 #> 103   0 2.75672838 15.34228326  18.099012      1    event 15.34228326 #> 104   0 4.92110677 21.90669172  26.827798      1    event 21.90669172 #> 105   0 0.32822299 15.46298947  15.791212      1    event 15.46298947 #> 106   0 3.08403651  4.05000527   7.134042      1    event  4.05000527 #> 107   0 4.17468632 22.01620664  26.190893      1    event 22.01620664 #> 108   0 0.99023756 19.18688536  20.177123      0 followup 44.31957517 #> 109   0 0.45966377  3.29379271   3.753456      1    event  3.29379271 #> 110   0 5.42178421  4.14760342   9.569388      1    event  4.14760342 #> 111   0 5.14900420 10.80325645  15.952261      1    event 10.80325645 #> 112   0 5.61194156 15.32494068  20.936882      1    event 15.32494068 #> 113   0 3.36234585 34.86598831  38.228334      0 followup 53.07746756 #> 114   0 2.25529571  7.36335783   9.618654      1    event  7.36335783 #> 115   0 1.23586805  2.67835417   3.914222      1    event  2.67835417 #> 116   0 0.88460494 21.33473535  22.219340      1    event 21.33473535 #> 117   0 4.06913261 30.97029318  35.039426      0 followup 32.37862507 #> 118   0 4.97996967 38.66923433  43.649204      1    event 38.66923433 #> 119   0 1.73910192  1.39572545   3.134827      1    event  1.39572545 #> 120   0 1.70140380 30.14889952  31.850303      1    event 30.14889952 #>        time.loss #> 1    195.8853600 #> 2     73.2213756 #> 3    436.9451217 #> 4     29.8591131 #> 5     15.6779871 #> 6     25.6240482 #> 7     52.2984642 #> 8     60.1847994 #> 9     44.7045582 #> 10   539.8744330 #> 11    55.4765967 #> 12    87.9916962 #> 13   452.2108471 #> 14   205.2699688 #> 15    90.7050572 #> 16   331.5137640 #> 17   147.1101706 #> 18   732.8209922 #> 19    25.6582469 #> 20   100.9707026 #> 21   285.8033935 #> 22   404.1576669 #> 23   169.9627426 #> 24   194.6718329 #> 25   580.0199675 #> 26    62.6192296 #> 27    19.0549929 #> 28     4.2567296 #> 29   228.3755121 #> 30   411.7209680 #> 31   240.4921566 #> 32   114.7949343 #> 33   197.8650894 #> 34   104.7176140 #> 35   241.4231596 #> 36     0.9659859 #> 37  1255.6196424 #> 38   199.7064847 #> 39   517.6081238 #> 40    62.7577975 #> 41   142.8236451 #> 42     3.2293399 #> 43   543.5174579 #> 44    80.7040361 #> 45    45.0312967 #> 46    36.9900816 #> 47   154.5674061 #> 48     6.9113705 #> 49    53.8187737 #> 50   194.2038060 #> 51   276.8522885 #> 52   287.1265592 #> 53    10.2214103 #> 54   154.6309102 #> 55   466.8263383 #> 56    61.0229625 #> 57    16.1232007 #> 58   566.5415518 #> 59   299.3602316 #> 60    10.2825558 #> 61   124.6847678 #> 62   591.9546876 #> 63    34.1466739 #> 64   126.9501387 #> 65    80.0074706 #> 66    55.5682644 #> 67   291.0275746 #> 68     7.2125018 #> 69    65.1360365 #> 70    41.1909336 #> 71   117.4624143 #> 72   148.7380541 #> 73    18.9417491 #> 74   124.2567739 #> 75   188.9480321 #> 76   820.8785856 #> 77    72.3685007 #> 78   532.3703920 #> 79   263.0334108 #> 80   102.3583277 #> 81    39.7137039 #> 82    58.7202159 #> 83    74.6453665 #> 84    18.6130706 #> 85    36.1834749 #> 86  1050.6961181 #> 87   170.1694746 #> 88    35.0592400 #> 89    32.9857665 #> 90     2.6595123 #> 91    65.3464899 #> 92   285.6313004 #> 93   192.5569994 #> 94    71.1282976 #> 95   188.4184292 #> 96   385.6667926 #> 97   215.8209612 #> 98   208.7581229 #> 99   417.0520188 #> 100  344.9592232 #> 101   32.0466179 #> 102   77.2871648 #> 103  322.4889067 #> 104  301.7831199 #> 105  227.9438408 #> 106   85.8628759 #> 107  302.7266622 #> 108   19.1868854 #> 109   78.3088285 #> 110   46.6367226 #> 111  145.5850196 #> 112  227.5528637 #> 113   34.8659883 #> 114  201.2151893 #> 115  454.6808671 #> 116  442.6130464 #> 117   30.9702932 #> 118  150.8983264 #> 119   22.8320615 #> 120  110.3606654"},{"path":"/reference/simulate_trial.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a clinical trial — simulate_trial","title":"Simulate a clinical trial — simulate_trial","text":"Simulate single- two-arm clinical trial, end study (EOS) triggered number events observed certain time elapsed. Whereas simulate_arm provides complete data patients, including time event loss follow-, simulate_trial mimicks actual survival study providing observed time (minimum time event censoring) censoring indicator.","code":""},{"path":"/reference/simulate_trial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a clinical trial — simulate_trial","text":"","code":"simulate_trial(arm0 = NA, arm1 = NA, events = NA, duration = Inf)"},{"path":"/reference/simulate_trial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a clinical trial — simulate_trial","text":"arm0 object class 'arm'. arm1 object class 'arm'. events number required events trigger end study; overrides study duration defined within arm0 arm1. duration time first-patient-trigger end study; overrides study duration defined within arm0 arm1. events duration specified, end study triggered either criteria, whichever occurs first.","code":""},{"path":"/reference/simulate_trial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a clinical trial — simulate_trial","text":"arm 0=arm0, 1=arm1 time.accr time accrual time.obs time observation accrual time.total time observation start study censor 0=censor, 1=event reason event description ('[experience ]event', '[loss ]followup', 'administration[ censoring]')","code":""},{"path":[]},{"path":"/reference/simulate_trial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a clinical trial — simulate_trial","text":"","code":"arm0 <- create_arm(size=120, accr_time=6, surv_scale=0.05, loss_scale=0.005, follow_time=12) arm1 <- create_arm(size=120, accr_time=6, surv_scale=0.03, loss_scale=0.005, follow_time=12) simulate_trial(arm0, duration=10) #>     arm   time.accr   time.obs time.total censor         reason #> 113   0 0.338500697 0.02714828  0.3656490      1          event #> 103   0 0.499259889 0.15808126  0.6573411      1          event #> 84    0 0.356565418 0.61243220  0.9689976      1          event #> 12    0 0.182220431 1.90257023  2.0847907      1          event #> 88    0 2.648214980 0.24557556  2.8937905      1          event #> 75    0 1.697325689 1.43129951  3.1286252      1          event #> 74    0 3.200544338 0.15368721  3.3542316      0       followup #> 33    0 3.625704073 0.51110929  4.1368134      1          event #> 13    0 2.541602022 1.66134332  4.2029453      1          event #> 97    0 0.233417527 4.62685789  4.8602754      1          event #> 91    0 1.786052138 3.23869853  5.0247507      1          event #> 52    0 4.655595365 0.49668530  5.1522807      1          event #> 67    0 0.191812829 5.00182746  5.1936403      1          event #> 81    0 4.430762898 2.01204464  6.4428075      0       followup #> 104   0 3.073110921 3.94130564  7.0144166      1          event #> 70    0 3.286676100 3.88760279  7.1742789      1          event #> 120   0 4.738342349 2.46470359  7.2030459      1          event #> 117   0 5.568248022 1.69140066  7.2596487      1          event #> 38    0 2.398359869 4.92858087  7.3269407      1          event #> 51    0 0.204506564 7.86193063  8.0664372      1          event #> 7     0 4.811798891 3.32244184  8.1342407      1          event #> 24    0 1.760207820 6.57164697  8.3318548      1          event #> 65    0 2.652614243 5.87415045  8.5267647      1          event #> 23    0 1.801330718 6.93152309  8.7328538      1          event #> 55    0 1.663539919 7.74380732  9.4073472      1          event #> 11    0 3.455046231 5.98586646  9.4409127      1          event #> 18    0 1.572655804 8.13404732  9.7067031      1          event #> 26    0 3.799957527 6.04667401  9.8466315      1          event #> 78    0 0.369899949 9.63010005 10.0000000      0 administration #> 100   0 2.521216532 7.47878347 10.0000000      0 administration #> 106   0 2.598160524 7.40183948 10.0000000      0 administration #> 31    0 0.924036670 9.07596333 10.0000000      0 administration #> 6     0 1.367811483 8.63218852 10.0000000      0 administration #> 57    0 3.455050767 6.54494923 10.0000000      0 administration #> 110   0 2.170172618 7.82982738 10.0000000      0 administration #> 61    0 3.739133761 6.26086624 10.0000000      0 administration #> 41    0 0.045745765 9.95425424 10.0000000      0 administration #> 34    0 3.117232413 6.88276759 10.0000000      0 administration #> 99    0 1.384032486 8.61596751 10.0000000      0 administration #> 98    0 5.880262922 4.11973708 10.0000000      0 administration #> 71    0 3.700719452 6.29928055 10.0000000      0 administration #> 30    0 3.385457165 6.61454284 10.0000000      0 administration #> 92    0 3.016673137 6.98332686 10.0000000      0 administration #> 73    0 4.253430823 5.74656918 10.0000000      0 administration #> 10    0 2.396772866 7.60322713 10.0000000      0 administration #> 82    0 4.628988070 5.37101193 10.0000000      0 administration #> 119   0 4.568359905 5.43164010 10.0000000      0 administration #> 53    0 0.980275844 9.01972416 10.0000000      0 administration #> 17    0 2.136403411 7.86359659 10.0000000      0 administration #> 62    0 0.156190622 9.84380938 10.0000000      0 administration #> 85    0 5.104807387 4.89519261 10.0000000      0 administration #> 93    0 0.807781046 9.19221895 10.0000000      0 administration #> 44    0 5.431861382 4.56813862 10.0000000      0 administration #> 64    0 2.774639157 7.22536084 10.0000000      0 administration #> 3     0 2.292626832 7.70737317 10.0000000      0 administration #> 83    0 2.698721352 7.30127865 10.0000000      0 administration #> 72    0 4.011363122 5.98863688 10.0000000      0 administration #> 45    0 3.446518052 6.55348195 10.0000000      0 administration #> 59    0 0.129384795 9.87061520 10.0000000      0 administration #> 58    0 2.036152059 7.96384794 10.0000000      0 administration #> 68    0 1.092718947 8.90728105 10.0000000      0 administration #> 5     0 1.042302231 8.95769777 10.0000000      0 administration #> 96    0 4.335615129 5.66438487 10.0000000      0 administration #> 49    0 4.522233026 5.47776697 10.0000000      0 administration #> 63    0 2.018209254 7.98179075 10.0000000      0 administration #> 28    0 5.228397748 4.77160225 10.0000000      0 administration #> 48    0 5.546600887 4.45339911 10.0000000      0 administration #> 22    0 1.290033395 8.70996660 10.0000000      0 administration #> 114   0 3.754192298 6.24580770 10.0000000      0 administration #> 29    0 2.447484564 7.55251544 10.0000000      0 administration #> 37    0 0.005208163 9.99479184 10.0000000      0 administration #> 77    0 3.286963791 6.71303621 10.0000000      0 administration #> 76    0 4.979228036 5.02077196 10.0000000      0 administration #> 1     0 0.940184503 9.05981550 10.0000000      0 administration #> 8     0 1.440828006 8.55917199 10.0000000      0 administration #> 14    0 2.340922118 7.65907788 10.0000000      0 administration #> 69    0 2.098606656 7.90139334 10.0000000      0 administration #> 32    0 0.464178545 9.53582146 10.0000000      0 administration #> 89    0 0.456461638 9.54353836 10.0000000      0 administration #> 60    0 5.697093856 4.30290614 10.0000000      0 administration #> 25    0 5.983637167 4.01636283 10.0000000      0 administration #> 108   0 1.329179910 8.67082009 10.0000000      0 administration #> 47    0 3.062572789 6.93742721 10.0000000      0 administration #> 115   0 2.124613521 7.87538648 10.0000000      0 administration #> 42    0 1.946482960 8.05351704 10.0000000      0 administration #> 4     0 2.099828109 7.90017189 10.0000000      0 administration #> 66    0 3.386920736 6.61307926 10.0000000      0 administration #> 95    0 3.038939090 6.96106091 10.0000000      0 administration #> 118   0 4.262585641 5.73741436 10.0000000      0 administration #> 36    0 4.648208231 5.35179177 10.0000000      0 administration #> 39    0 4.005747900 5.99425210 10.0000000      0 administration #> 80    0 1.831329355 8.16867064 10.0000000      0 administration #> 79    0 3.341274855 6.65872514 10.0000000      0 administration #> 43    0 4.695760846 5.30423915 10.0000000      0 administration #> 21    0 4.714453380 5.28554662 10.0000000      0 administration #> 111   0 3.285927342 6.71407266 10.0000000      0 administration #> 86    0 0.870924017 9.12907598 10.0000000      0 administration #> 101   0 2.883892866 7.11610713 10.0000000      0 administration #> 9     0 1.984875621 8.01512438 10.0000000      0 administration #> 46    0 3.961810534 6.03818947 10.0000000      0 administration #> 107   0 3.798061252 6.20193875 10.0000000      0 administration #> 102   0 2.314174385 7.68582562 10.0000000      0 administration #> 109   0 3.221792657 6.77820734 10.0000000      0 administration #> 2     0 2.549878470 7.45012153 10.0000000      0 administration #> 35    0 2.310122247 7.68987775 10.0000000      0 administration #> 54    0 4.049908339 5.95009166 10.0000000      0 administration #> 90    0 3.649046587 6.35095341 10.0000000      0 administration #> 16    0 3.177506019 6.82249398 10.0000000      0 administration #> 19    0 0.625978142 9.37402186 10.0000000      0 administration #> 87    0 0.134992833 9.86500717 10.0000000      0 administration #> 112   0 0.896036376 9.10396362 10.0000000      0 administration #> 116   0 2.050919825 7.94908017 10.0000000      0 administration #> 27    0 0.497384618 9.50261538 10.0000000      0 administration #> 50    0 5.322180970 4.67781903 10.0000000      0 administration #> 94    0 2.842728883 7.15727112 10.0000000      0 administration #> 15    0 5.331545105 4.66845489 10.0000000      0 administration #> 105   0 0.049393520 9.95060648 10.0000000      0 administration #> 20    0 5.360596870 4.63940313 10.0000000      0 administration #> 56    0 2.061893803 7.93810620 10.0000000      0 administration #> 40    0 1.259315209 8.74068479 10.0000000      0 administration simulate_trial(arm0, arm1, events=50) #>     arm  time.accr   time.obs time.total censor         reason #> 55    0 0.97259767 1.57809420   2.550692      1          event #> 199   1 0.28055407 2.69373741   2.974291      0       followup #> 63    0 2.81674180 0.16869917   2.985441      1          event #> 79    0 0.70106747 2.80713664   3.508204      1          event #> 173   1 3.42911867 0.09094229   3.520061      1          event #> 171   1 3.02967281 0.72427791   3.753951      1          event #> 175   1 1.52245955 2.26019879   3.782658      1          event #> 9     0 3.22333552 0.59265798   3.815994      1          event #> 90    0 3.20547095 1.02919842   4.234669      1          event #> 184   1 0.23713378 4.22425555   4.461389      0       followup #> 31    0 0.07051216 4.64399176   4.714504      1          event #> 81    0 3.15889638 1.59755802   4.756454      1          event #> 114   0 3.97254550 0.83906706   4.811613      1          event #> 136   1 3.97114941 1.13887763   5.110027      1          event #> 135   1 0.88451476 4.35295523   5.237470      1          event #> 213   1 0.98984174 4.25518155   5.245023      1          event #> 72    0 3.74037581 1.56366525   5.304041      1          event #> 218   1 2.97874879 2.51950618   5.498255      0       followup #> 48    0 1.16476365 4.40034990   5.565114      1          event #> 54    0 3.28652245 2.32722924   5.613752      1          event #> 50    0 0.33714164 5.27700987   5.614152      1          event #> 224   1 4.06419061 2.01047395   6.074665      1          event #> 169   1 1.75924182 4.38512575   6.144368      1          event #> 129   1 1.15414832 5.01696783   6.171116      0       followup #> 11    0 2.64862198 3.66092752   6.309550      1          event #> 67    0 2.33748677 3.99964140   6.337128      1          event #> 240   1 3.74663394 2.69099695   6.437631      1          event #> 89    0 3.89887012 2.67622524   6.575095      1          event #> 37    0 5.38423128 1.23356997   6.617801      1          event #> 41    0 1.61197296 5.01092829   6.622901      0       followup #> 239   1 0.59808121 6.12676569   6.724847      0       followup #> 233   1 2.59746254 4.30296741   6.900430      1          event #> 45    0 5.97092827 1.10197734   7.072906      1          event #> 165   1 0.65522309 6.47009662   7.125320      1          event #> 113   0 4.98660986 2.27721461   7.263824      1          event #> 118   0 5.87928228 1.65554852   7.534831      1          event #> 139   1 5.32796442 2.27645925   7.604424      1          event #> 180   1 5.38799950 2.25124253   7.639242      1          event #> 57    0 2.35367843 5.40073796   7.754416      1          event #> 4     0 0.75504846 7.00364777   7.758696      1          event #> 93    0 4.69559076 3.22294256   7.918533      1          event #> 97    0 1.94853385 6.08060964   8.029143      1          event #> 69    0 3.00767506 5.09522503   8.102900      1          event #> 194   1 2.94288774 5.20531709   8.148205      1          event #> 102   0 3.44219840 4.71940663   8.161605      1          event #> 207   1 2.29234040 5.95762018   8.249961      1          event #> 22    0 5.67177607 2.64974519   8.321521      1          event #> 56    0 4.08825317 4.27190525   8.360158      1          event #> 222   1 2.96036338 5.40298426   8.363348      1          event #> 62    0 4.83017483 3.83527648   8.665451      0       followup #> 209   1 3.80115130 5.07894313   8.880094      1          event #> 6     0 4.83394967 4.09737405   8.931324      1          event #> 141   1 1.66235388 7.35772953   9.020083      0       followup #> 151   1 4.22400902 4.92784628   9.151855      1          event #> 42    0 0.51168915 8.80627479   9.317964      1          event #> 101   0 3.41921901 5.94982277   9.369042      1          event #> 73    0 3.65285332 6.02555778   9.678411      0       followup #> 15    0 0.33781302 9.40099384   9.738807      1          event #> 127   1 4.04137046 5.76451650   9.805887      1          event #> 163   1 5.81833658 3.98755038   9.805887      0 administration #> 76    0 2.25117117 7.55471579   9.805887      0 administration #> 13    0 3.98619908 5.81968788   9.805887      0 administration #> 83    0 4.89378120 4.91210575   9.805887      0 administration #> 188   1 3.75169984 6.05418712   9.805887      0 administration #> 77    0 0.67028715 9.13559981   9.805887      0 administration #> 235   1 3.93244442 5.87344254   9.805887      0 administration #> 228   1 3.75662435 6.04926260   9.805887      0 administration #> 38    0 0.99195132 8.81393564   9.805887      0 administration #> 236   1 5.73275077 4.07313618   9.805887      0 administration #> 65    0 3.32742503 6.47846193   9.805887      0 administration #> 146   1 3.61652536 6.18936159   9.805887      0 administration #> 3     0 5.82906418 3.97682278   9.805887      0 administration #> 193   1 3.60855466 6.19733230   9.805887      0 administration #> 86    0 1.91536733 7.89051963   9.805887      0 administration #> 219   1 2.10003547 7.70585148   9.805887      0 administration #> 112   0 4.13190372 5.67398324   9.805887      0 administration #> 155   1 3.96970761 5.83617935   9.805887      0 administration #> 157   1 4.11842105 5.68746591   9.805887      0 administration #> 47    0 3.21901640 6.58687056   9.805887      0 administration #> 178   1 2.49916908 7.30671788   9.805887      0 administration #> 30    0 3.28341153 6.52247543   9.805887      0 administration #> 26    0 0.77675620 9.02913076   9.805887      0 administration #> 166   1 4.53491142 5.27097554   9.805887      0 administration #> 177   1 2.13178324 7.67410372   9.805887      0 administration #> 124   1 2.42660557 7.37928139   9.805887      0 administration #> 168   1 3.84919615 5.95669081   9.805887      0 administration #> 53    0 5.49738291 4.30850404   9.805887      0 administration #> 20    0 5.68025733 4.12562963   9.805887      0 administration #> 214   1 1.69523547 8.11065148   9.805887      0 administration #> 23    0 4.69746044 5.10842651   9.805887      0 administration #> 203   1 3.33165588 6.47423108   9.805887      0 administration #> 99    0 4.31755994 5.48832702   9.805887      0 administration #> 111   0 4.41183720 5.39404976   9.805887      0 administration #> 150   1 2.27891912 7.52696784   9.805887      0 administration #> 205   1 3.30839253 6.49749443   9.805887      0 administration #> 96    0 4.16939665 5.63649030   9.805887      0 administration #> 8     0 3.25869750 6.54718946   9.805887      0 administration #> 46    0 0.07447530 9.73141166   9.805887      0 administration #> 133   1 4.24246142 5.56342554   9.805887      0 administration #> 183   1 5.95555827 3.85032869   9.805887      0 administration #> 51    0 0.84018771 8.96569925   9.805887      0 administration #> 29    0 1.98333135 7.82255561   9.805887      0 administration #> 94    0 4.87568551 4.93020145   9.805887      0 administration #> 195   1 0.33486370 9.47102326   9.805887      0 administration #> 211   1 4.76239459 5.04349237   9.805887      0 administration #> 154   1 4.34761947 5.45826748   9.805887      0 administration #> 229   1 3.85631155 5.94957541   9.805887      0 administration #> 115   0 4.76438628 5.04150067   9.805887      0 administration #> 145   1 1.14169938 8.66418757   9.805887      0 administration #> 61    0 3.54355271 6.26233425   9.805887      0 administration #> 159   1 1.99964654 7.80624042   9.805887      0 administration #> 103   0 3.93278475 5.87310221   9.805887      0 administration #> 44    0 0.62048586 9.18540109   9.805887      0 administration #> 198   1 1.41339454 8.39249242   9.805887      0 administration #> 191   1 5.08104670 4.72484026   9.805887      0 administration #> 40    0 5.82834859 3.97753837   9.805887      0 administration #> 25    0 3.51180245 6.29408451   9.805887      0 administration #> 43    0 4.25341933 5.55246762   9.805887      0 administration #> 176   1 4.21153014 5.59435682   9.805887      0 administration #> 39    0 3.33660229 6.46928467   9.805887      0 administration #> 21    0 1.86452371 7.94136325   9.805887      0 administration #> 52    0 2.63297393 7.17291302   9.805887      0 administration #> 80    0 2.11090250 7.69498446   9.805887      0 administration #> 116   0 4.48278259 5.32310437   9.805887      0 administration #> 75    0 5.39689660 4.40899036   9.805887      0 administration #> 137   1 4.11975637 5.68613058   9.805887      0 administration #> 208   1 0.18642290 9.61946406   9.805887      0 administration #> 197   1 1.27817250 8.52771446   9.805887      0 administration #> 88    0 5.02353166 4.78235530   9.805887      0 administration #> 200   1 0.42251828 9.38336867   9.805887      0 administration #> 91    0 0.54477446 9.26111250   9.805887      0 administration #> 32    0 4.39043603 5.41545093   9.805887      0 administration #> 138   1 4.89939333 4.90649363   9.805887      0 administration #> 147   1 2.94671942 6.85916753   9.805887      0 administration #> 85    0 2.60019837 7.20568859   9.805887      0 administration #> 5     0 4.32797080 5.47791615   9.805887      0 administration #> 123   1 1.24162827 8.56425868   9.805887      0 administration #> 33    0 2.21922027 7.58666669   9.805887      0 administration #> 206   1 0.06354070 9.74234626   9.805887      0 administration #> 223   1 1.31008018 8.49580678   9.805887      0 administration #> 227   1 4.71419228 5.09169468   9.805887      0 administration #> 60    0 1.36889160 8.43699536   9.805887      0 administration #> 217   1 5.47672206 4.32916490   9.805887      0 administration #> 105   0 2.16222254 7.64366441   9.805887      0 administration #> 119   0 1.50638324 8.29950372   9.805887      0 administration #> 126   1 5.32282243 4.48306453   9.805887      0 administration #> 128   1 1.34565678 8.46023018   9.805887      0 administration #> 226   1 2.07632016 7.72956679   9.805887      0 administration #> 120   0 3.53986793 6.26601903   9.805887      0 administration #> 187   1 0.53335641 9.27253054   9.805887      0 administration #> 161   1 3.82253513 5.98335183   9.805887      0 administration #> 59    0 3.42208700 6.38379996   9.805887      0 administration #> 16    0 3.59398334 6.21190362   9.805887      0 administration #> 95    0 3.97421127 5.83167569   9.805887      0 administration #> 12    0 1.49325410 8.31263286   9.805887      0 administration #> 142   1 1.88787520 7.91801175   9.805887      0 administration #> 231   1 4.83402983 4.97185713   9.805887      0 administration #> 92    0 1.35349009 8.45239687   9.805887      0 administration #> 17    0 4.53871399 5.26717296   9.805887      0 administration #> 202   1 0.29652404 9.50936292   9.805887      0 administration #> 70    0 3.00468177 6.80120519   9.805887      0 administration #> 84    0 5.68389547 4.12199149   9.805887      0 administration #> 201   1 2.47030533 7.33558162   9.805887      0 administration #> 117   0 5.16436960 4.64151735   9.805887      0 administration #> 109   0 4.44753250 5.35835446   9.805887      0 administration #> 238   1 3.36800003 6.43788693   9.805887      0 administration #> 130   1 4.11473451 5.69115245   9.805887      0 administration #> 230   1 3.80205567 6.00383128   9.805887      0 administration #> 190   1 3.79348037 6.01240659   9.805887      0 administration #> 28    0 0.59590128 9.20998568   9.805887      0 administration #> 185   1 2.66646192 7.13942503   9.805887      0 administration #> 35    0 2.45620011 7.34968685   9.805887      0 administration #> 179   1 3.78529958 6.02058737   9.805887      0 administration #> 66    0 2.31371248 7.49217447   9.805887      0 administration #> 58    0 0.75299165 9.05289531   9.805887      0 administration #> 78    0 3.83351865 5.97236831   9.805887      0 administration #> 121   1 4.90810800 4.89777896   9.805887      0 administration #> 2     0 0.24838638 9.55750057   9.805887      0 administration #> 27    0 4.13037136 5.67551560   9.805887      0 administration #> 216   1 3.59951870 6.20636826   9.805887      0 administration #> 36    0 2.94353738 6.86234957   9.805887      0 administration #> 186   1 3.39649643 6.40939052   9.805887      0 administration #> 34    0 2.88884781 6.91703914   9.805887      0 administration #> 164   1 2.57979269 7.22609427   9.805887      0 administration #> 181   1 2.41991471 7.38597225   9.805887      0 administration #> 232   1 5.68417358 4.12171338   9.805887      0 administration #> 196   1 5.45222631 4.35366065   9.805887      0 administration #> 162   1 3.56130638 6.24458058   9.805887      0 administration #> 24    0 2.07149856 7.73438840   9.805887      0 administration #> 160   1 3.32863901 6.47724795   9.805887      0 administration #> 131   1 5.87040964 3.93547732   9.805887      0 administration #> 132   1 3.51833232 6.28755463   9.805887      0 administration #> 152   1 4.18763597 5.61825098   9.805887      0 administration #> 100   0 4.01707529 5.78881167   9.805887      0 administration #> 98    0 5.59368013 4.21220683   9.805887      0 administration #> 172   1 0.95075018 8.85513678   9.805887      0 administration #> 19    0 2.59621859 7.20966836   9.805887      0 administration #> 82    0 0.50121657 9.30467038   9.805887      0 administration #> 108   0 4.83804670 4.96784026   9.805887      0 administration #> 148   1 0.99699479 8.80889217   9.805887      0 administration #> 167   1 0.21107157 9.59481539   9.805887      0 administration #> 182   1 1.01436405 8.79152290   9.805887      0 administration #> 107   0 1.88888871 7.91699825   9.805887      0 administration #> 189   1 0.27543950 9.53044746   9.805887      0 administration #> 153   1 0.01709917 9.78878779   9.805887      0 administration #> 64    0 3.80443574 6.00145122   9.805887      0 administration #> 221   1 3.15681122 6.64907574   9.805887      0 administration #> 74    0 3.12927879 6.67660817   9.805887      0 administration #> 204   1 1.80256968 8.00331728   9.805887      0 administration #> 7     0 0.01798826 9.78789869   9.805887      0 administration #> 68    0 4.55899384 5.24689312   9.805887      0 administration #> 122   1 2.37742921 7.42845775   9.805887      0 administration #> 18    0 2.84036196 6.96552500   9.805887      0 administration #> 106   0 1.59133233 8.21455463   9.805887      0 administration #> 104   0 3.22958018 6.57630678   9.805887      0 administration #> 87    0 0.18491288 9.62097408   9.805887      0 administration #> 140   1 3.14300226 6.66288470   9.805887      0 administration #> 1     0 1.69688604 8.10900092   9.805887      0 administration #> 170   1 4.46875509 5.33713187   9.805887      0 administration #> 14    0 5.72723586 4.07865109   9.805887      0 administration #> 212   1 4.52729882 5.27858814   9.805887      0 administration #> 134   1 2.21788846 7.58799850   9.805887      0 administration #> 143   1 4.30891696 5.49697000   9.805887      0 administration #> 156   1 5.98610977 3.81977719   9.805887      0 administration #> 110   0 3.90697443 5.89891253   9.805887      0 administration #> 220   1 4.16640138 5.63948558   9.805887      0 administration #> 71    0 5.07716228 4.72872467   9.805887      0 administration #> 237   1 2.04880951 7.75707745   9.805887      0 administration #> 210   1 1.39213104 8.41375592   9.805887      0 administration #> 215   1 5.93265641 3.87323054   9.805887      0 administration #> 158   1 5.05750348 4.74838348   9.805887      0 administration #> 49    0 0.14421634 9.66167062   9.805887      0 administration #> 192   1 3.09510352 6.71078344   9.805887      0 administration #> 144   1 0.35680733 9.44907963   9.805887      0 administration #> 10    0 5.42424117 4.38164579   9.805887      0 administration #> 174   1 4.57950058 5.22638638   9.805887      0 administration #> 149   1 4.20068736 5.60519960   9.805887      0 administration #> 234   1 0.79049236 9.01539460   9.805887      0 administration #> 225   1 1.18711073 8.61877623   9.805887      0 administration #> 125   1 3.18074041 6.62514655   9.805887      0 administration"},{"path":"/reference/size_two_arm.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample size — size_two_arm","title":"Sample size — size_two_arm","text":"Calculate required sample size expected number events two-arm survival study.","code":""},{"path":"/reference/size_two_arm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample size — size_two_arm","text":"","code":"size_two_arm(arm0, arm1, test = list(test = \"weighted logrank\"),   power = 0.8, alpha = 0.025, sides = 1)"},{"path":"/reference/size_two_arm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample size — size_two_arm","text":"arm0 object class 'arm'. arm1 object class 'arm'. test list list lists. list must contain minimum key 'test' describing type statistical test. Default test \"weighted logrank\". Kaplan-Meier based tests (\"survival difference\", \"survival ratio\", \"rmst difference\", \"rmst ratio\", \"percentile difference\", \"percentile ratio\") require user define additional key, either desired 'milestone' 'percentile'. weighted log-rank test require additional keys. However, user may choose weight function (\"1\"=unweighted, \"n\"=Gehan-Breslow, \"sqrtN\"=Tarone-Ware, \"FH_[]_[b]\"= Fleming-Harrington p=q=b) approximation large-sample mean (\"asymptotic\", \"generalized schoenfeld\", \"event driven\") variance (\"1\", \"block[ randomization]\", \"simple[ randomization]\") wish use. Default choice 'weight'=\"1\", 'mean.approx'=\"asymptotic\", 'var.approx'=\"1\". details regarding different mean variance approximations weight log-rank test, please see Yung Liu (press). power 1 - type 2 error rate alpha type 1 error rate sides 1=1-sided test, 2=2-sided test","code":""},{"path":"/reference/size_two_arm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample size — size_two_arm","text":"n0 sample size arm0 n1 sample size arm1 n total sample size d0 expected number events arm0 d1 expected number events arm1 d total expected number events; can used convert time-driven   trial event-driven trial.","code":""},{"path":"/reference/size_two_arm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sample size — size_two_arm","text":"Yung, G Liu, Y. (2019). Sample size power weighted log-rank test Kaplan-Meier based tests allowance non-proportional hazards. Biometrics. <doi:10.1111/biom.13196>","code":""},{"path":[]},{"path":"/reference/size_two_arm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample size — size_two_arm","text":"","code":"arm0 <- create_arm(size=120, accr_time=6, surv_scale=0.05, loss_scale=0.005, follow_time=12) arm1 <- create_arm(size=120, accr_time=6, surv_scale=0.03, loss_scale=0.005, follow_time=12) size_two_arm(arm0, arm1) #>        n0        n1         n        d0        d1         d  #> 142.41934 142.41934 284.83868  72.47511  49.72759 122.20270  size_two_arm(arm0, arm1, list(test=\"weighted logrank\",   weight=\"n\",   mean.approx=\"generalized schoenfeld\",   var.approx=\"block\")) #>        n0        n1         n        d0        d1         d  #> 149.96628 149.96628 299.93257  76.31563  52.36271 128.67834  size_two_arm(arm0, arm1, list(test=\"survival difference\", milestone=12)) #>        n0        n1         n        d0        d1         d  #> 167.78545 167.78545 335.57090  85.38354  58.58450 143.96805  size_two_arm(arm0, arm1, list(test=\"rmst ratio\", milestone=12)) #>       n0       n1        n       d0       d1        d  #> 207.1541 207.1541 414.3083 105.4177  72.3306 177.7483  size_two_arm(arm0, arm1, list(test=\"percentile difference\", percentile=0.25)) #>        n0        n1         n        d0        d1         d  #> 274.83583 274.83583 549.67166 139.85991  95.96255 235.82246  size_two_arm(arm0, arm1, list(   list(test=\"weighted logrank\"),   list(test=\"survival difference\", milestone=12))) #>   test       n0       n1        n       d0       d1        d #> 1    1 142.4193 142.4193 284.8387 72.47511 49.72759 122.2027 #> 2    2 167.7854 167.7854 335.5709 85.38354 58.58450 143.9680"}]
